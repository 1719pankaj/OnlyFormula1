# .github/workflows/android-ci-cd.yml

name: Android CI/CD Debug Build & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode debug.keystore
        env:
          DEBUG_KEYSTORE_BASE64: ${{ secrets.DEBUG_KEYSTORE_BASE64 }}
        run: |
          # Ensure the target directory exists
          $keystoreDir = Join-Path $HOME ".android"
          New-Item -ItemType Directory -Force -Path $keystoreDir

          # Define the target file path
          $keystorePath = Join-Path $keystoreDir "debug.keystore"
          Write-Host "Target keystore path: $keystorePath"

          $base64 = $env:DEBUG_KEYSTORE_BASE64
          if (-not [string]::IsNullOrEmpty($base64)) {
            try {
              $bytes = [System.Convert]::FromBase64String($base64)

              # --- CHANGE HERE ---
              # Use .NET method to write raw bytes directly
              [System.IO.File]::WriteAllBytes($keystorePath, $bytes)
              # --- END CHANGE ---

              Write-Host "Successfully decoded and wrote debug.keystore to $keystorePath"
            } catch {
              # Catch potential errors during decoding OR writing
              Write-Error "Failed to decode or write debug.keystore: $($_.Exception.Message)"
              exit 1
            }
          } else {
            Write-Error "DEBUG_KEYSTORE_BASE64 secret is empty or not set!"
            exit 1
          }

      # Grant execute permission (mostly for consistency, less critical for .bat)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Get Version Name
        id: get_version
        # Set only the env vars needed for signing, NOT the file path
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
          # *** REMOVED DEBUG_STORE_FILE ***
        run: |
          Write-Host "Attempting to get version name..."
          # Run gradle; Gradle will find the keystore at the default location
          $versionOutput = ./gradlew.bat :app:printVersionName -q --no-daemon 2>&1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Gradle task printVersionName failed. Output/Error: $versionOutput"
            exit 1
          }
          $version = $versionOutput.Trim()
          if ([string]::IsNullOrEmpty($version)) {
             Write-Error "Gradle task printVersionName produced empty output!"
             exit 1
          }
          Write-Host "Raw version output: '$version'"
          echo "version_name=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Set version_name output variable to: '$version'"

      - name: Build Debug APK
        # Set only the env vars needed for signing, NOT the file path
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
          # *** REMOVED DEBUG_STORE_FILE ***
        # Run gradle; Gradle will find the keystore at the default location
        run: ./gradlew.bat assembleDebug --no-daemon

      - name: Create Git Tag
        run: |
          $tagName = "${{ steps.get_version.outputs.version_name }}"
          if ([string]::IsNullOrEmpty($tagName)) {
            Write-Error "Version name output from previous step is empty. Cannot create tag."
            exit 1
          }
          Write-Host "Attempting to create and push tag: $tagName"
          git tag $tagName
          # Add error checking for push
          git push origin $tagName
          if ($LASTEXITCODE -ne 0) {
            Write-Error "git push origin tag '$tagName' failed."
            # Check if tag already exists - might not be a fatal error depending on desired flow
            # git fetch --tags # Ensure local tags are up-to-date
            # if (-not (git describe --tags --exact-match HEAD 2>$null)) { exit 1 } # Exit if push failed for other reasons
            Write-Warning "Tag push failed. It might already exist." # Or make it fail: exit 1
          } else {
            Write-Host "Successfully pushed tag $tagName"
          }


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version_name }}
          release_name: Release ${{ steps.get_version.outputs.version_name }}
          body: |
            Debug build for version ${{ steps.get_version.outputs.version_name }}
          draft: false
          prerelease: true

      - name: Upload Debug APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Use Join-Path for constructing asset_path robustly (optional but good practice)
          asset_path: ./app/build/outputs/apk/debug/app-debug.apk # Standard path usually works fine
          asset_name: app-debug-${{ steps.get_version.outputs.version_name }}.apk
          asset_content_type: application/vnd.android.package-archive