# .github/workflows/android-ci-cd.yml

name: Android CI/CD Debug Build & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode and Validate debug.keystore
        env:
          DEBUG_KEYSTORE_BASE64: ${{ secrets.DEBUG_KEYSTORE_BASE64 }}
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
        run: |
          # ... (Decoding part remains the same) ...
          Write-Host "Successfully decoded and potentially wrote keystore bytes to $keystorePath"

          # --- Validation Part ---
          Write-Host "Validating the written keystore file..."
          # ... (File size check remains the same) ...
          Write-Host "Keystore file size: $($fileInfo.Length) bytes"

          # --- Explicit Variable Debugging (NEW) ---
          Write-Host "Attempting to read DEBUG_STORE_PASSWORD from environment..."
          # Check existence AGAIN right before use
          if (Test-Path Env:DEBUG_STORE_PASSWORD) {
              Write-Host "Env:DEBUG_STORE_PASSWORD EXISTS."
              # Assign to variable
              $storePassword = $env:DEBUG_STORE_PASSWORD
              # Check if the VARIABLE is null or empty AFTER assignment
              if ([string]::IsNullOrEmpty($storePassword)) {
                  Write-Error "CRITICAL: Env:DEBUG_STORE_PASSWORD exists, but assigned \$storePassword variable is NULL or EMPTY."
                  # Optionally print the raw env var - MIGHT BE MASKED but worth trying
                  $rawEnvPass = $env:DEBUG_STORE_PASSWORD
                  Write-Host "Raw value from \$env:DEBUG_STORE_PASSWORD: '$rawEnvPass'" # Check if it prints '***' or ''
                  exit 1 # Fail here if empty
              } else {
                  Write-Host "\$storePassword variable assigned. Length: $($storePassword.Length)."
                  # MASKED - This will likely just print '***' but confirms it's not empty
                  Write-Host "Value assigned to \$storePassword (masked): '$storePassword'"
              }
          } else {
              Write-Error "CRITICAL: Env:DEBUG_STORE_PASSWORD does NOT exist in environment."
              exit 1 # Fail here if not set
          }
          # --- End Explicit Variable Debugging ---

          # Attempt keytool list
          $keytoolPath = Join-Path $env:JAVA_HOME "bin\keytool.exe"
          Write-Host "Using keytool at: $keytoolPath"
          # $storePassword is already assigned and validated above

          if (-not (Test-Path $keytoolPath -PathType Leaf)) {
             Write-Error "Validation Failed: keytool.exe not found at expected path: $keytoolPath"
             exit 1
          }

          # Execute keytool
          Write-Host "Running keytool -list..."
          # Ensure the variable is correctly passed - use double quotes around it in the command string
          $command = "& `"$keytoolPath`" -list -v -keystore `"$keystorePath`" -storepass `"$storePassword`" -noprompt"
          Write-Host "Executing: $command" # Password should appear masked ('***') if not empty
          Invoke-Expression $command | Out-Host

          # Check the exit code
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Validation Failed: keytool -list command failed with exit code $LASTEXITCODE..."
            exit 1
          } else {
            Write-Host "Validation Success: keytool -list command succeeded on the runner."
          }

      # Grant execute permission (mostly for consistency, less critical for .bat)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Get Version Name
        id: get_version
        # Set only the env vars needed for signing, NOT the file path
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
          # *** REMOVED DEBUG_STORE_FILE ***
        run: |
          Write-Host "Attempting to get version name..."
          # Run gradle; Gradle will find the keystore at the default location
          $versionOutput = ./gradlew.bat :app:printVersionName -q --no-daemon 2>&1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Gradle task printVersionName failed. Output/Error: $versionOutput"
            exit 1
          }
          $version = $versionOutput.Trim()
          if ([string]::IsNullOrEmpty($version)) {
             Write-Error "Gradle task printVersionName produced empty output!"
             exit 1
          }
          Write-Host "Raw version output: '$version'"
          echo "version_name=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Set version_name output variable to: '$version'"

      - name: Display Signing Environment Variables
        run: |
          echo "Store Pass Env Var Exists: $(Test-Path Env:DEBUG_STORE_PASSWORD)"
          echo "Key Alias Env Var Exists: $(Test-Path Env:DEBUG_KEY_ALIAS)"
          echo "Key Pass Env Var Exists: $(Test-Path Env:DEBUG_KEY_PASSWORD)"
          # Optionally, try printing the values (BE CAREFUL - this might expose them in logs if not masked)
          # You can check GitHub Actions masking, but let's start with just checking existence.
          echo "DEBUG_STORE_PASSWORD='${{ env.DEBUG_STORE_PASSWORD }}'" # Requires env block below
        env: # If you uncomment the echo line above, you need this env block too
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
      # --- END NEW DEBUGGING STEP ---

      - name: Clean Build Cache
        run: ./gradlew.bat clean --no-daemon

      - name: Build Debug APK
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
        # Add --stacktrace
        run: ./gradlew.bat assembleDebug --no-daemon --stacktrace

      - name: Create Git Tag
        run: |
          $tagName = "${{ steps.get_version.outputs.version_name }}"
          if ([string]::IsNullOrEmpty($tagName)) {
            Write-Error "Version name output from previous step is empty. Cannot create tag."
            exit 1
          }
          Write-Host "Attempting to create and push tag: $tagName"
          git tag $tagName
          # Add error checking for push
          git push origin $tagName
          if ($LASTEXITCODE -ne 0) {
            Write-Error "git push origin tag '$tagName' failed."
            # Check if tag already exists - might not be a fatal error depending on desired flow
            # git fetch --tags # Ensure local tags are up-to-date
            # if (-not (git describe --tags --exact-match HEAD 2>$null)) { exit 1 } # Exit if push failed for other reasons
            Write-Warning "Tag push failed. It might already exist." # Or make it fail: exit 1
          } else {
            Write-Host "Successfully pushed tag $tagName"
          }


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version_name }}
          release_name: Release ${{ steps.get_version.outputs.version_name }}
          body: |
            Debug build for version ${{ steps.get_version.outputs.version_name }}
          draft: false
          prerelease: true

      - name: Upload Debug APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Use Join-Path for constructing asset_path robustly (optional but good practice)
          asset_path: ./app/build/outputs/apk/debug/app-debug.apk # Standard path usually works fine
          asset_name: app-debug-${{ steps.get_version.outputs.version_name }}.apk
          asset_content_type: application/vnd.android.package-archive
