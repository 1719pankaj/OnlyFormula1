# .github/workflows/android-ci-cd.yml

name: Android CI/CD Debug Build & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode and Validate debug.keystore
        env:
          # Secret for decoding
          DEBUG_KEYSTORE_BASE64: ${{ secrets.DEBUG_KEYSTORE_BASE64 }}
          # Secret needed for validation (keytool)
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
        run: |
          # --- Decoding Part ---
          $keystoreDir = Join-Path $HOME ".android"
          New-Item -ItemType Directory -Force -Path $keystoreDir
          $keystorePath = Join-Path $keystoreDir "debug.keystore"
          Write-Host "Target keystore path: $keystorePath"

          $base64 = $env:DEBUG_KEYSTORE_BASE64
          if (-not [string]::IsNullOrEmpty($base64)) {
            try {
              $bytes = [System.Convert]::FromBase64String($base64)
              [System.IO.File]::WriteAllBytes($keystorePath, $bytes)
              Write-Host "Successfully decoded and potentially wrote keystore bytes to $keystorePath"
            } catch {
              Write-Error "Failed to decode or write keystore bytes: $($_.Exception.Message)"
              exit 1
            }
          } else {
            Write-Error "DEBUG_KEYSTORE_BASE64 secret is empty or not set!"
            exit 1
          }

          # --- Validation Part (New) ---
          Write-Host "Validating the written keystore file..."

          # Check file size
          try {
              $fileInfo = Get-Item $keystorePath -ErrorAction Stop
              Write-Host "Keystore file size: $($fileInfo.Length) bytes"
              if ($fileInfo.Length -eq 0) {
                  Write-Error "Validation Failed: Keystore file is empty (0 bytes)."
                  exit 1
              }
          } catch {
              Write-Error "Validation Failed: Cannot get file info for $keystorePath. Error: $($_.Exception.Message)"
              exit 1
          }

          # Attempt keytool list (Requires JAVA_HOME to be set, which setup-java does)
          $keytoolPath = Join-Path $env:JAVA_HOME "bin\keytool.exe"
          Write-Host "Using keytool at: $keytoolPath"
          $storePassword = $env:DEBUG_STORE_PASSWORD

          # Check if keytool exists
          if (-not (Test-Path $keytoolPath -PathType Leaf)) {
             Write-Error "Validation Failed: keytool.exe not found at expected path: $keytoolPath"
             exit 1
          }
          # Check if password env var is set (secrets are masked, but check if the env var was populated)
          if (-not (Test-Path Env:DEBUG_STORE_PASSWORD)) {
             Write-Error "Validation Failed: DEBUG_STORE_PASSWORD environment variable not set in this step's env block for validation."
             exit 1
          }

          # Execute keytool
          Write-Host "Running keytool -list..."
          # Use Invoke-Expression or Start-Process might be more robust for handling args/passwords
          $command = "& `"$keytoolPath`" -list -v -keystore `"$keystorePath`" -storepass `"$storePassword`" -noprompt"
          Write-Host "Executing: $command" # Log the command, password will be masked if secret masking works
          Invoke-Expression $command | Out-Host # Pipe output to host

          # Check the exit code of the last command
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Validation Failed: keytool -list command failed with exit code $LASTEXITCODE. Check error messages above. Is the store password in the DEBUG_STORE_PASSWORD secret correct for the DECODED keystore?"
            exit 1
          } else {
            Write-Host "Validation Success: keytool -list command succeeded on the runner."
          }

      # Grant execute permission (mostly for consistency, less critical for .bat)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Get Version Name
        id: get_version
        # Set only the env vars needed for signing, NOT the file path
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
          # *** REMOVED DEBUG_STORE_FILE ***
        run: |
          Write-Host "Attempting to get version name..."
          # Run gradle; Gradle will find the keystore at the default location
          $versionOutput = ./gradlew.bat :app:printVersionName -q --no-daemon 2>&1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Gradle task printVersionName failed. Output/Error: $versionOutput"
            exit 1
          }
          $version = $versionOutput.Trim()
          if ([string]::IsNullOrEmpty($version)) {
             Write-Error "Gradle task printVersionName produced empty output!"
             exit 1
          }
          Write-Host "Raw version output: '$version'"
          echo "version_name=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Set version_name output variable to: '$version'"

      - name: Display Signing Environment Variables
        run: |
          echo "Store Pass Env Var Exists: $(Test-Path Env:DEBUG_STORE_PASSWORD)"
          echo "Key Alias Env Var Exists: $(Test-Path Env:DEBUG_KEY_ALIAS)"
          echo "Key Pass Env Var Exists: $(Test-Path Env:DEBUG_KEY_PASSWORD)"
          # Optionally, try printing the values (BE CAREFUL - this might expose them in logs if not masked)
          # You can check GitHub Actions masking, but let's start with just checking existence.
          echo "DEBUG_STORE_PASSWORD='${{ env.DEBUG_STORE_PASSWORD }}'" # Requires env block below
        env: # If you uncomment the echo line above, you need this env block too
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
      # --- END NEW DEBUGGING STEP ---

      - name: Clean Build Cache
        run: ./gradlew.bat clean --no-daemon

      - name: Build Debug APK
        env:
          DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
          DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
        # Add --stacktrace
        run: ./gradlew.bat assembleDebug --no-daemon --stacktrace

      - name: Create Git Tag
        run: |
          $tagName = "${{ steps.get_version.outputs.version_name }}"
          if ([string]::IsNullOrEmpty($tagName)) {
            Write-Error "Version name output from previous step is empty. Cannot create tag."
            exit 1
          }
          Write-Host "Attempting to create and push tag: $tagName"
          git tag $tagName
          # Add error checking for push
          git push origin $tagName
          if ($LASTEXITCODE -ne 0) {
            Write-Error "git push origin tag '$tagName' failed."
            # Check if tag already exists - might not be a fatal error depending on desired flow
            # git fetch --tags # Ensure local tags are up-to-date
            # if (-not (git describe --tags --exact-match HEAD 2>$null)) { exit 1 } # Exit if push failed for other reasons
            Write-Warning "Tag push failed. It might already exist." # Or make it fail: exit 1
          } else {
            Write-Host "Successfully pushed tag $tagName"
          }


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version_name }}
          release_name: Release ${{ steps.get_version.outputs.version_name }}
          body: |
            Debug build for version ${{ steps.get_version.outputs.version_name }}
          draft: false
          prerelease: true

      - name: Upload Debug APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Use Join-Path for constructing asset_path robustly (optional but good practice)
          asset_path: ./app/build/outputs/apk/debug/app-debug.apk # Standard path usually works fine
          asset_name: app-debug-${{ steps.get_version.outputs.version_name }}.apk
          asset_content_type: application/vnd.android.package-archive
